
# A workflow, which builds the ComfyUI Docker image and publishes it to the GitHub Container Registry
name: Build and Publish Docker Images

# Configures this workflow to run when a tag was pushed to the repository that matches the pattern "v[0-9]+.[0-9]+.[0-9]+", which is a semantic
# versioning pattern; this token will be created when a new release is created; the release event cannot be used, because the docker/metadata-action
# action does not support the release event
on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"

# Defines two custom environment variables for the host name of the registry (ghcr.io for the GitHub Container Registry) and the name of the image,
# which is set to the name of the repository
env:
  REGISTRY: ghcr.io

# This workflow has a single job, which builds the Docker image and publishes it to the GitHub Container Registry
jobs:

  # The `build-and-publish` builds the Docker image, and publishes it to the GitHub Container Registry
  build-and-publish:
    strategy:
      matrix:
        PYTORCH_VERSION:
          - 2.5.1-cuda11.8-cudnn9
          - 2.5.1-cuda12.1-cudnn9
          - 2.5.1-cuda12.4-cudnn9
    env:
      LATEST_PYTORCH_VERSION: 2.5.1-cuda12.4-cudnn9
    # This job will run on an Ubuntu GitHub runner, which is a good default choice and it comes with Docker pre-installed
    runs-on: ubuntu-latest

    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    # This job 1) checks out the repository, 2) logs in to the GitHub Container Registry, 3) extracts metadata for the Docker image, 4) builds and
    # pushes the Docker image, and 5) generates an artifact attestation for the image
    steps:
      - name: lowercase repo name
        id: lower_repo_name
        uses: Entepotenz/change-string-case-action-min-dependencies@v1
        with:
          string: ${{ github.repository }}

      - name: set IMAGE_NAME
        run: |
          echo "IMAGE_NAME=${{ steps.lower_repo_name.outputs.lowercase }}" >> "$GITHUB_ENV"

      # Checks out the repository so that the workflow can access the files in the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Logs in to the GitHub Container Registry registry using the account of the user that triggered the workflow run and the GitHub token that is
      # an automatically generated secret that is usually only used to access the repository (the permissions defined above allow the token to also
      # publish Docker images to the GitHub Container Registry) that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extracts the latest versions of ComfyUI and the ComfyUI Manager from git; the versions are written to the output
      # file, which are available in subsequent steps under steps.versions.outputs.COMFYUI_VERSION and steps.versions.outputs.COMFYUI_MANAGER_VERSION;
      # the versions are used to tag the Docker image, so that users know which versions of ComfyUI and the ComfyUI Manager are included in the image
      - name: Extract ComfyUI & ComfyUI Manager Versions
        id: versions
        run: |
          echo "COMFYUI_VERSION=$(git ls-remote --tags --refs https://github.com/comfyanonymous/ComfyUI.git | grep -o 'v.*' | sort -V | tail -1)" >> "$GITHUB_ENV"
          echo "COMFYUI_NIGHTLY_VERSION=$(git ls-remote https://github.com/comfyanonymous/ComfyUI.git HEAD | cut -f1)" >> "$GITHUB_ENV"
          echo "COMFYUI_MANAGER_VERSION=$(git ls-remote --tags --refs https://github.com/ltdrdata/ComfyUI-Manager.git | grep -o -E '[0-9]+\..*' | sort -V | tail -1)" >> "$GITHUB_ENV"
      
      - name: Check if image exists on GHCR
        id: image_check
        uses: tyriis/docker-image-tag-exists@v2.1.0
        with:
          registry: ghcr.io
          repository: "${{ env.IMAGE_NAME}}"
          tag: "${{ matrix.PYTORCH_VERSION }}-cui-${{ env.COMFYUI_VERSION }}-cuim-${{ env.COMFYUI_MANAGER_VERSION }}"
   
      - name: Check if nightly image exists on GHCR
        id: image_check_nightly
        uses: tyriis/docker-image-tag-exists@v2.1.0
        with:
          registry: ghcr.io
          repository: "${{ env.IMAGE_NAME}}"
          tag: "${{ matrix.PYTORCH_VERSION }}-cui-nightly-${{ env.COMFYUI_NIGHTLY_VERSION }}-cuim-${{ env.COMFYUI_MANAGER_VERSION }}"

      - name: Set up tags
        id: tags
        if: ${{ steps.image_check.outputs.tag == 'not found' }}
        run: |
          if [ "${{ matrix.PYTORCH_VERSION }}" = "${{ env.LATEST_PYTORCH_VERSION }}" ]; then
            {
              echo 'tags<<EOF'
              echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}:latest"
              echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}:${{ matrix.PYTORCH_VERSION }}-latest"
              echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}:${{ matrix.PYTORCH_VERSION }}-cui-${{ env.COMFYUI_VERSION }}-cuim-${{ env.COMFYUI_MANAGER_VERSION }}"
              echo EOF
            } >> "$GITHUB_OUTPUT"
          else
            {
              echo 'tags<<EOF'
              echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}:${{ matrix.PYTORCH_VERSION }}-latest"
              echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}:${{ matrix.PYTORCH_VERSION }}-cui-${{ env.COMFYUI_VERSION }}-cuim-${{ env.COMFYUI_MANAGER_VERSION }}"
              echo EOF
            } >> "$GITHUB_OUTPUT"
          fi
          
      - name: Set up nightly tags
        id: tags_nightly
        if: ${{ steps.image_check_nightly.outputs.tag == 'not found' }}
        run: |
          if [ "${{ matrix.PYTORCH_VERSION }}" = "${{ env.LATEST_PYTORCH_VERSION }}" ]; then
            {
              echo 'tags<<EOF'
              echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}:nightly"
              echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}:${{ matrix.PYTORCH_VERSION }}-nightly"
              echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}:${{ matrix.PYTORCH_VERSION }}-cui-nightly-${{ env.COMFYUI_NIGHTLY_VERSION }}-cuim-${{ env.COMFYUI_MANAGER_VERSION }}"
              echo EOF
            } >> "$GITHUB_OUTPUT"
          else
            {
              echo 'tags<<EOF'
              echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}:${{ matrix.PYTORCH_VERSION }}-nightly"
              echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}:${{ matrix.PYTORCH_VERSION }}-cui-nightly-${{ env.COMFYUI_NIGHTLY_VERSION }}-cuim-${{ env.COMFYUI_MANAGER_VERSION }}"
              echo EOF
            } >> "$GITHUB_OUTPUT"
          fi
      
      # Builds the Docker image for ComfyUI; if the build succeeds, it is pushed to the GitHub Container Registry; the "context" parameter specifies
      # the build context, which is the directory that contains the Dockerfile; the tags and labels extracted in the previous step are used to tag
      # and label the image
      - name: Build and Push Docker Image
        id: build_and_push_docker_image
        uses: docker/build-push-action@v6
        if: ${{ steps.image_check.outputs.tag == 'not found' }}
        with:
          context: .
          push: true
          build-args: |
            PYTORCH_IMG_VERSION=${{ matrix.PYTORCH_VERSION }}
            COMFYUI_VERSION=${{ env.COMFYUI_VERSION }}
            COMFYUI_MANAGER_VERSION=${{ env.COMFYUI_MANAGER_VERSION }}
          tags: ${{ steps.tags.outputs.tags }}
          labels: |
            org.opencontainers.image.title=ComfyUI Docker
            org.opencontainers.image.authors=TheRealPSV
          provenance: false

      # Generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built; it increases supply chain
      # security for people who consume the image
      - name: Generate Artifact Attestation
        uses: actions/attest-build-provenance@v1
        if: ${{ steps.image_check.outputs.tag == 'not found' }}
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.build_and_push_docker_image.outputs.digest }}
      
      # Builds the Docker image for ComfyUI; if the build succeeds, it is pushed to the GitHub Container Registry; the "context" parameter specifies
      # the build context, which is the directory that contains the Dockerfile; the tags and labels extracted in the previous step are used to tag
      # and label the image
      - name: Build and Push Docker Image Nightly
        id: build_and_push_docker_image_nightly
        uses: docker/build-push-action@v6
        if: ${{ steps.image_check_nightly.outputs.tag == 'not found' }}
        with:
          context: .
          push: true
          build-args: |
            PYTORCH_IMG_VERSION=${{ matrix.PYTORCH_VERSION }}
            COMFYUI_VERSION=master
            COMFYUI_MANAGER_VERSION=${{ env.COMFYUI_MANAGER_VERSION }}
          tags: ${{ steps.tags_nightly.outputs.tags }}
          labels: |
            org.opencontainers.image.title=ComfyUI Docker
            org.opencontainers.image.authors=TheRealPSV
          provenance: false

      # Generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built; it increases supply chain
      # security for people who consume the image
      - name: Generate Artifact Attestation Nightly
        uses: actions/attest-build-provenance@v1
        if: ${{ steps.image_check_nightly.outputs.tag == 'not found' }}
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.build_and_push_docker_image_nightly.outputs.digest }}
  
      # Remove tags from nightly images older than a week
      - name: Clean Up Nightly Images
        uses: dataaxiom/ghcr-cleanup-action@v1.0.16
        if: ${{ always()}}
        with:
          older-than: 1 week
          delete-tags: ${{ matrix.PYTORCH_VERSION }}-cui-nightly-*
          keep-n-tagged: 1
      
      # Remove tags from release images older than 3 months
      - name: Clean Up Release Images
        uses: dataaxiom/ghcr-cleanup-action@v1.0.16
        if: ${{ always()}}
        with:
          older-than: 3 months
          delete-tags: ${{ matrix.PYTORCH_VERSION }}-cui-*
          exclude-tags: ${{ matrix.PYTORCH_VERSION }}-cui-nightly-*
          keep-n-tagged: 1
      
      # Clean up untagged images
      - name: Clean Up Untagged Images
        uses: dataaxiom/ghcr-cleanup-action@v1.0.16
        if: ${{ always()}}
        with:
          delete-untagged: true
          delete-tags: 'sha256-*'
